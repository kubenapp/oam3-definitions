apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  annotations:
    definition.oam.dev/description: Component to deploy from github repository
  name: deploy-git-app
spec:
  schematic:
    cue:
      template: |
        import (
        	"strconv"
        	"strings"
        )

        envs: [
        	{
        		name:  "LAUNCHER_TARGET_REPO"
        		value: parameter.targetRepo
        	},
        	{
        		name: "LAUNCHER_REPOSITORY_USER"
        		if parameter.repositoryAccessTokenSecret != _|_ {
        			valueFrom: secretKeyRef: {
        				name: parameter.repositoryAccessTokenSecret
        				key:  "username"
        			}
        		}
        		if parameter.repositoryAccessTokenSecret == _|_ {
        			value: ""
        		}
        	},
        	{
        		name: "LAUNCHER_REPOSITORY_ACCESS_TOKEN"
        		if parameter.repositoryAccessTokenSecret != _|_ {
        			valueFrom: secretKeyRef: {
        				name: parameter.repositoryAccessTokenSecret
        				key:  "pat"
        			}
        		}
        		if parameter.repositoryAccessTokenSecret == _|_ {
        			value: ""
        		}
        	},
        	{
        		name: "LAUNCHER_EXEC_ARGS"
        		if parameter.args != _|_ {
        			value: strings.Join(parameter.args, ",")
        		}
        		if parameter.args == _|_ {
        			value: ""
        		}
        	},
        	{
        		name: "LAUNCHER_CURRENT_WORKFLOW"
        		if parameter.currentWorkflow != _|_ {
        			value: parameter.currentWorkflow
        		}
        		if parameter.currentWorkflow == _|_ {
        			value: ""
        		}
        	},
        	{
        		name: "LAUNCHER_MAIN_FILE_PATH"
        		if parameter.mainPath != _|_ {
        			value: parameter.mainPath
        		}
        		if parameter.mainPath == _|_ {
        			value: ""
        		}
        	},

        ]
        mountsArray: {
        	pvc: *[
        		for v in parameter.volumeMounts.pvc {
        			{
        				mountPath: v.mountPath
        				name:      v.name
        			}
        		},
        	] | []

        	configMap: *[
        			for v in parameter.volumeMounts.configMap {
        			{
        				mountPath: v.mountPath
        				name:      v.name
        			}
        		},
        	] | []

        	secret: *[
        		for v in parameter.volumeMounts.secret {
        			{
        				mountPath: v.mountPath
        				name:      v.name
        			}
        		},
        	] | []

        	emptyDir: *[
        			for v in parameter.volumeMounts.emptyDir {
        			{
        				mountPath: v.mountPath
        				name:      v.name
        			}
        		},
        	] | []        	
        }
        volumesArray: {
        	pvc: *[
        		for v in parameter.volumeMounts.pvc {
        			{
        				name: v.name
        				persistentVolumeClaim: claimName: v.claimName
        			}
        		},
        	] | []

        	configMap: *[
        			for v in parameter.volumeMounts.configMap {
        			{
        				name: v.name
        				configMap: {
        					defaultMode: v.defaultMode
        					name:        v.cmName
        					if v.items != _|_ {
        						items: v.items
        					}
        				}
        			}
        		},
        	] | []

        	secret: *[
        		for v in parameter.volumeMounts.secret {
        			{
        				name: v.name
        				secret: {
        					defaultMode: v.defaultMode
        					secretName:  v.secretName
        					if v.items != _|_ {
        						items: v.items
        					}
        				}
        			}
        		},
        	] | []

        	emptyDir: *[
        			for v in parameter.volumeMounts.emptyDir {
        			{
        				name: v.name
        				emptyDir: medium: v.medium
        			}
        		},
        	] | []
        }
        exposePortsMap: {
        	for v in parameter.ports {        		
        		"\(v.port)" : v.port,
        	}
        	for v in parameter.ingresses {        		
        		"\(v.targetPort)" : v.targetPort,
        	}					
        }
        totalPorts: {
        	exposePorts: *[
        			for k, v in exposePortsMap {
        			{
        			  port:       v
        			  targetPort: v
        			  name:       "port-" + k
        			}
        		},
        	] | []
        }
        containerPorts: {
        	exposePorts: *[
        			for k, v in exposePortsMap {
        			{
        			  containerPort: v
        			  protocol:      "TCP"
        			  name:          "port-" + k
        			}
        		},
        	] | []
        }
        output: {
        	apiVersion: "apps/v1"
        	kind:       "Deployment"
        	spec: {
        		selector: matchLabels: "app.oam.dev/component": context.name

        		template: {
        			metadata: {
        				labels: {
        					if parameter.labels != _|_ {
        						parameter.labels
        					}
        					if parameter.addRevisionLabel {
        						"app.oam.dev/revision": context.revision
        					}
        					"app.oam.dev/name":      context.appName
        					"app.oam.dev/component": context.name
        				}
        				if parameter.annotations != _|_ {
        					annotations: parameter.annotations
        				}
        			}

        			spec: {
        				containers: [{
        					name: context.name
        					if strings.ToLower(parameter["language"]) == "static" {
        						image: "napptive/playground-launcher-static-nginx:1.23-v1.0.0"
        					}
        					if strings.ToLower(parameter["language"]) == "golang" || strings.ToLower(parameter["language"]) == "go"{
        						image: "napptive/playground-launcher-golang:1.18-v1.0.0"
        					}
        					if strings.ToLower(parameter["language"]) == "python" {
        						image: "napptive/playground-launcher-python:3.11-v1.0.0"
        					}
        					if strings.ToLower(parameter["language"]) == "nodejs" {
        						image: "napptive/playground-launcher-nodejs:18-v1.0.0"
        					}
        					if parameter["ports"] != _|_ || parameter["ingresses"] != _|_ {
        						ports: containerPorts.exposePorts  
        					}

        					if parameter["env"] != _|_ {
        						env:
        							envs + parameter["env"]
        					}
        					if parameter["env"] == _|_ {
        						env:
        							envs
        					}

        					if parameter["cpu"] != _|_ {
        						resources: {
        							limits: cpu:   parameter.cpu
        							requests: cpu: parameter.cpu
        						}
        					}

        					if parameter["memory"] != _|_ {
        						resources: {
        							limits: memory:   parameter.memory
        							requests: memory: parameter.memory
        						}
        					}

        					if parameter["volumeMounts"] != _|_ {
        						volumeMounts: mountsArray.pvc + mountsArray.configMap + mountsArray.secret + mountsArray.emptyDir 
        					}

        					if parameter["livenessProbe"] != _|_ {
        						livenessProbe: parameter.livenessProbe
        					}

        					if parameter["readinessProbe"] != _|_ {
        						readinessProbe: parameter.readinessProbe
        					}

        				}]

        				if parameter["volumeMounts"] != _|_ {
        					volumes: volumesArray.pvc + volumesArray.configMap + volumesArray.secret + volumesArray.emptyDir 
        				}
        			}
        		}
        	}
        }
        outputs: {
        	if parameter["ports"] != _|_ || parameter["ingresses"] != _|_ {
        		serviceExpose: {
        			apiVersion: "v1"
        			kind:       "Service"
        			metadata: name: context.name
        			spec: {
        				selector: "app.oam.dev/component": context.name
        				ports: totalPorts.exposePorts
        			}
        		}
        	}
        	if parameter["ingresses"] != _|_ {
        		for v, i in parameter.ingresses {
        			"objects-\(i.targetPort)": {
        				apiVersion: "core.napptive.com/v1alpha1"
        				kind:       "Ingress"
        				metadata: name: context.name + "-" + strconv.FormatInt(i.targetPort, 10)
        				spec: {
        					selector: "app.oam.dev/component": context.name
        					name:              context.name + "-" + strconv.FormatInt(i.targetPort, 10)
        					path:              "/"
        					port:              i.targetPort
        					protocol:          "HTTP"
        					targetServiceName: context.name
        				}
        			}
        		}
        	}
        }       
        parameter: {
        	// +usage=Specify the labels in the workload
        	labels?: [string]: string

        	// +usage=Specify the annotations in the workload
        	annotations?: [string]: string

        	// +usage=GitHub url
        	targetRepo: string

        	// +usage=Secret name where the GitHub credentials are.
        	// The secret should contain two entries:
        	// username: with the GitHub username
        	// pat: with a GitHub Personal Access Token
        	repositoryAccessTokenSecret?: string
          
            // +usage=main file path
            mainPath?: string

        	//+usage the path of a file in the repo that contains a workflow
        	currentWorkflow?: string

        	// +usage=application language. Must be "static", "python", "nodejs" or"golang"
        	language: *"static"  | string

        	// +usage=Which ports do you want customer traffic sent to, defaults to 80
        	ports?: [...{
        		// +usage=Number of port to expose on the pod's IP address
        		port: int
        	}]

        	// +usage=Which ports do you want to expose externally
        	ingresses?: [...{
        		// +usage=Number of port to expose
        		targetPort: int
        	}]
        	// +ignore
        	// +usage=If addRevisionLabel is true, the revision label will be added to the underlying pods
        	addRevisionLabel: *false | bool

        	// +usage=Arguments to run the application
        	args?: [...string]

        	// +usage=Define arguments by using environment variables
        	env?: [...{
        		// +usage=Environment variable name
        		name: string
        		// +usage=The value of the environment variable
        		value?: string
        		// +usage=Specifies a source the value of this var should come from
        		valueFrom?: {
        			// +usage=Selects a key of a secret in the pod's namespace
        			secretKeyRef?: {
        				// +usage=The name of the secret in the pod's namespace to select from
        				name: string
        				// +usage=The key of the secret to select from. Must be a valid secret key
        				key: string
        			}
        			// +usage=Selects a key of a config map in the pod's namespace
        			configMapKeyRef?: {
        				// +usage=The name of the config map in the pod's namespace to select from
        				name: string
        				// +usage=The key of the config map to select from. Must be a valid secret key
        				key: string
        			}
        		}
        	}]

        	// +usage=Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)
        	cpu?: string

        	// +usage=Specifies the attributes of the memory resource required for the container.
        	memory?: string

        	volumeMounts?: {
        		// +usage=Mount PVC type volume
        		pvc?: [...{
        			name:      string
        			mountPath: string
        			// +usage=The name of the PVC
        			claimName: string
        		}]
        		// +usage=Mount ConfigMap type volume
        		configMap?: [...{
        			name:        string
        			mountPath:   string
        			defaultMode: *420 | int
        			cmName:      string
        			items?: [...{
        				key:  string
        				path: string
        				mode: *511 | int
        			}]
        		}]
        		// +usage=Mount Secret type volume
        		secret?: [...{
        			name:        string
        			mountPath:   string
        			defaultMode: *420 | int
        			secretName:  string
        			items?: [...{
        				key:  string
        				path: string
        				mode: *511 | int
        			}]
        		}]
        		// +usage=Mount EmptyDir type volume
        		emptyDir?: [...{
        			name:      string
        			mountPath: string
        			medium:    *"" | "Memory"
        		}]
        	}

        	// +usage=Instructions for assessing whether the container is alive.
        	livenessProbe?: #HealthProbe

        	// +usage=Instructions for assessing whether the container is in a suitable state to serve traffic.
        	readinessProbe?: #HealthProbe

        }
        #HealthProbe: {

        	// +usage=Instructions for assessing container health by executing a command. Either this attribute or the httpGet attribute or the tcpSocket attribute MUST be specified. This attribute is mutually exclusive with both the httpGet attribute and the tcpSocket attribute.
        	exec?: {
        		// +usage=A command to be executed inside the container to assess its health. Each space delimited token of the command is a separate array element. Commands exiting 0 are considered to be successful probes, whilst all other exit codes are considered failures.
        		command: [...string]
        	}

        	// +usage=Instructions for assessing container health by executing an HTTP GET request. Either this attribute or the exec attribute or the tcpSocket attribute MUST be specified. This attribute is mutually exclusive with both the exec attribute and the tcpSocket attribute.
        	httpGet?: {
        		// +usage=The endpoint, relative to the port, to which the HTTP GET request should be directed.
        		path: string
        		// +usage=The TCP socket within the container to which the HTTP GET request should be directed.
        		port:    int
        		host?:   string
        		scheme?: *"HTTP" | string
        		httpHeaders?: [...{
        			name:  string
        			value: string
        		}]
        	}

        	// +usage=Instructions for assessing container health by probing a TCP socket. Either this attribute or the exec attribute or the httpGet attribute MUST be specified. This attribute is mutually exclusive with both the exec attribute and the httpGet attribute.
        	tcpSocket?: {
        		// +usage=The TCP socket within the container that should be probed to assess container health.
        		port: int
        	}

        	// +usage=Number of seconds after the container is started before the first probe is initiated.
        	initialDelaySeconds: *0 | int

        	// +usage=How often, in seconds, to execute the probe.
        	periodSeconds: *10 | int

        	// +usage=Number of seconds after which the probe times out.
        	timeoutSeconds: *1 | int

        	// +usage=Minimum consecutive successes for the probe to be considered successful after having failed.
        	successThreshold: *1 | int

        	// +usage=Number of consecutive failures required to determine the container is not alive (liveness probe) or not ready (readiness probe).
        	failureThreshold: *3 | int
        }
  status:
    customStatus: |-
      ready: {
      	readyReplicas: *0 | int
      } & {
      	if context.output.status.readyReplicas != _|_ {
      		readyReplicas: context.output.status.readyReplicas
      	}
      }
      message: "Ready:\(ready.readyReplicas)/\(context.output.spec.replicas)"
    healthPolicy: |-
      ready: {
      	updatedReplicas:    *0 | int
      	readyReplicas:      *0 | int
      	replicas:           *0 | int
      	observedGeneration: *0 | int
      } & {
      	if context.output.status.updatedReplicas != _|_ {
      		updatedReplicas: context.output.status.updatedReplicas
      	}
      	if context.output.status.readyReplicas != _|_ {
      		readyReplicas: context.output.status.readyReplicas
      	}
      	if context.output.status.replicas != _|_ {
      		replicas: context.output.status.replicas
      	}
      	if context.output.status.observedGeneration != _|_ {
      		observedGeneration: context.output.status.observedGeneration
      	}
      }
      isHealth: (context.output.spec.replicas == ready.readyReplicas) && (context.output.spec.replicas == ready.updatedReplicas) && (context.output.spec.replicas == ready.replicas) && (ready.observedGeneration == context.output.metadata.generation || ready.observedGeneration > context.output.metadata.generation)
  workload:
    definition:
      apiVersion: apps/v1
      kind: Deployment
    type: deployments.apps

